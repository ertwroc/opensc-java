<?xml version="1.0"?>

<!--

 $Id$

 Author: Wolfgang Glas/ev-i

 Ant build file for the PKCS#11 provider

-->

<project name="opensc-PKCS11" basedir="." default="usage">

	<property name="name" value="opensc-PKCS11"/>
	<!-- This value should correspond to the value of the version
		 in src/org/opensc/pkcs11/PKCS11Provider.java
		 and jni/src/jniP11/Makefile.in
      --> 
	<property name="version" value="0.1"/>
	<!-- The patchlevel is increased for each release, when the jni Interface
	     remains binary compatible, i.e. no new native function is added. -->
	<property name="patchlevel" value="0"/>

	<property environment="env"/>

	<condition property="c.build.dir" value="jni/build/unix/release">
		<os family="unix" />
	</condition>
	<condition property="c.uild.dir" value="jni/build/mingw/release">
		<os family="windows" />
	</condition>

	<condition property="jni.lib" value="lib${name}-${version}.so">
		<os family="unix" />
	</condition>
	<condition property="jni.lib" value="${name}-${version}.dll">
		<os family="windows" />
	</condition>
	
	<property name="src.dir" value="java/src"/>            <!-- *.java -->
	<property name="build.dir" value="java/bin"/>          <!-- *.class -->
	<property name="lib.dir" value="java/lib"/>          <!-- external *.jar -->
	<property name="dist.dir" value="dist"/>
	<property name="javadoc.dir" value="doc"/>

	<property name="test.src.dir" value="test/src"/><!-- *.java -->
	<property name="test.build.dir" value="test/bin"/><!-- *.class -->
	<property name="test.lib.dir" value="test/lib"/>      <!-- external *.jar -->
	
	<property name="jarfile" value="${name}.jar" />

        <property name="log4j.version" value="1.2.13" />
        <property name="commons-logging.version" value="1.1" />
        <property name="junit.version" value="4.1" />

        <filelist id="third-party-jars" dir="${lib.dir}">
			<file name="commons-logging.jar"/>
			<file name="log4j.jar"/>
	</filelist>
        <filelist id="test-jars" dir="${test.lib.dir}">
			<file name="junit.jar"/>
        </filelist>

	<path id="master-classpath">
           <filelist refid="third-party-jars"/>
	</path>

	<path id="test-classpath">
           <filelist refid="third-party-jars"/>
           <filelist refid="test-jars"/>
	   <pathelement location="${dist.dir}/${jarfile}"/>
	</path>

	<path id="runtest-classpath">
           <filelist refid="third-party-jars"/>
           <filelist refid="test-jars"/>
	   <pathelement location="${dist.dir}/${jarfile}"/>
	   <pathelement location="${test.build.dir}"/>
	</path>


	<!-- target Usage -->
	<target name="usage" description="print usage" >

		<echo message=""/>
		<echo message="opensc-PKCS11 build file"/>
		<echo message="---------------"/>
		<echo message=""/>
		<echo message="Available targets include:"/>
		<echo message=""/>
		<echo message="clean               --> Clean temporary output dirs"/>
		<echo message="build               --> Compile main Java sources"/>
		<echo message="jnibuild            --> Build JNI plugin"/>
		<echo message="buildtest           --> Compile test Java sources"/>
		<echo message="runtest             --> Run Java tests"/>
		<echo message="javadoc             --> (re)Creates the javadoc in doc/javadoc"/>
		<echo message="jarfile             --> Patches config files and creates .jar file"/>
		<echo message="jnidist             --> install JNI plugin in dist-dir"/>
		<echo message="all                 --> Everything for rebuilding"/>
		<echo message=""/>
		<echo message=""/>

	</target>


	<!-- target Clean -->
	<target name="clean" description="Clean output dirs (build, dist)">

		<delete dir="${build.dir}"/>
		<delete dir="${test.build.dir}"/>
		<delete dir="${dist.dir}"/>
		<delete dir="${javadoc.dir}"/>
	    <exec dir="${c.build.dir}" executable="make">
                 <arg line="distclean"/>
            </exec>
	</target>

	<!-- target distclean -->
	<target name="distclean" depends="clean" description="clean and delete all downloaded files.">
            <delete file="test/lib/junit${junit.version}.zip"/>
            <delete file="test/lib/junit.jar"/>
            <delete file="test/lib/junit.jar.MD5"/>

            <delete file="java/lib/logging-log4j-${log4j.version}.tar.gz"/>
            <delete file="java/lib/log4j.jar"/>
            <delete file="java/lib/log4j.jar.MD5"/>

            <delete file="java/lib/commons-logging-${commons-logging.version}.tar.gz"/>
            <delete file="java/lib/commons-logging.jar"/>
            <delete file="java/lib/commons-logging.jar.MD5"/>
        </target>

        <!-- condition junit.up.to.date -->
          <condition property="junit.up.to.date">
             <and>
                <available file="test/lib/junit.jar"/>
                <checksum file="test/lib/junit.jar"/>
             </and>
          </condition>

        <!-- target fetch-junit -->
	<target name="fetch-junit" unless="junit.up.to.date" description="Fetch external junit.jar.">
         <get
src="http://switch.dl.sourceforge.net/sourceforge/junit/junit${junit.version}.zip"
  dest="test/lib/junit${junit.version}.zip" />

         <unzip src="test/lib/junit${junit.version}.zip"  dest="test/lib" />
         <move file="test/lib/junit${junit.version}/junit-${junit.version}.jar"
               tofile="test/lib/junit.jar"/>
         <delete dir="test/lib/junit${junit.version}"/>
         <checksum file="test/lib/junit.jar"/>
        </target>


        <!-- condition log4j.up.to.date -->
          <condition property="log4j.up.to.date">
             <and>
                <available file="java/lib/log4j.jar"/>
                <checksum file="java/lib/log4j.jar"/>
             </and>
          </condition>

        <!-- target fetch-log4j -->
	<target name="fetch-log4j" unless="log4j.up.to.date" description="Fetch external log4j.jar.">
         <get
src="http://apache.4any.org/logging/log4j/${log4j.version}/logging-log4j-${log4j.version}.tar.gz"
  dest="java/lib/logging-log4j-${log4j.version}.tar.gz" />

         <untar src="java/lib/logging-log4j-${log4j.version}.tar.gz"  dest="java/lib" compression="gzip"/>
         <move file="java/lib/logging-log4j-${log4j.version}/dist/lib/log4j-${log4j.version}.jar"
               tofile="java/lib/log4j.jar"/>
         <delete dir="java/lib/logging-log4j-${log4j.version}"/>
         <checksum file="java/lib/log4j.jar"/>
        </target>

        <!-- condition commons-logging.up.to.date -->
          <condition property="commons-logging.up.to.date">
             <and>
                <available file="java/lib/commons-logging.jar"/>
                <checksum file="java/lib/commons-logging.jar"/>
             </and>
          </condition>

        <!-- target fetch-commons-logging -->
	<target name="fetch-commons-logging" unless="commons-logging.up.to.date" description="Fetch external commons-logging.jar.">
         <get
src="http://apache.4any.org/jakarta/commons/logging/binaries/commons-logging-${commons-logging.version}.tar.gz"
  dest="java/lib/commons-logging-${commons-logging.version}.tar.gz" />

         <untar src="java/lib/commons-logging-${commons-logging.version}.tar.gz"  dest="java/lib" compression="gzip"/>
         <move file="java/lib/commons-logging-${commons-logging.version}/commons-logging-${commons-logging.version}.jar"
               tofile="java/lib/commons-logging.jar"/>
         <delete dir="java/lib/commons-logging-${commons-logging.version}"/>
         <checksum file="java/lib/commons-logging.jar"/>
        </target>

        <!-- target fetchjars -->
	<target name="fetchjars" depends="fetch-commons-logging,fetch-log4j,fetch-junit" description="Fetch external jar files.">
        </target>

        <!-- target jnibuild -->
	<target name="jnibuild" description="Compile C source tree into shared library.">

	    <exec dir="${c.build.dir}" executable="perl">
                <arg line="../../../src/scripts/config.pl"/>
            </exec>
	    <exec dir="${c.build.dir}" executable="make"/>

	</target>

        <!-- target jnidist -->
        <target name="jnidist" depends="jnibuild" description="Copy C shared library to the dist directory.">
	    <mkdir dir="${dist.dir}"/>
            <copy todir="${dist.dir}">
               <fileset dir="${c.build.dir}/jniP11">
                   <include name="${jni.lib}"/>
               </fileset>
            </copy>   
        </target>

         <!-- target srcdist -->
        <target name="srcdist" description="zip source files for use in the exported eclipse project.">
	    <mkdir dir="${dist.dir}"/>
            <zip zipfile="${dist.dir}/opensc-PKCS11-src.zip">
               <fileset dir="${src.dir}">
                   <include name="**/*.java"/>
               </fileset>
            </zip>   
        </target>

         <!-- target distzip -->
        <target name="distzip" depends="signedjarfile,jnidist,srcdist" description="zip an exported eclipse project.">
           <copy file="conf/eclipse/classpath.tmpl" tofile="${dist.dir}/.classpath"/>
           <copy file="conf/eclipse/project.tmpl" tofile="${dist.dir}/.project"/>
 
            <zip zipfile="${dist.dir}/opensc-PKCS11-${os.name}-${os.arch}-${version}.${patchlevel}.zip">
               <fileset dir="${dist.dir}">
                   <include name="${jni.lib}"/>
                   <include name="opensc-PKCS11.jar"/>
                   <include name="opensc-PKCS11-src.zip"/>
                   <include name=".classpath"/>
                   <include name=".project"/>
               </fileset>
            </zip>   
        </target>

        <!-- target build -->
	<target name="build" description="Compile main source tree java files into class files">

		<mkdir dir="${build.dir}"/>

		<javac destdir="${build.dir}" debug="true"
				deprecation="false" optimize="false" failonerror="true" encoding="UTF-8" >
			<src path="${src.dir}"/>
			<classpath refid="master-classpath"/>
		</javac>

	</target>

	<!-- target jarfile -->
	<target name="jarfile" depends="build" description="Compile main source
tree java files into jar archive">

		<copy todir="${build.dir}" preservelastmodified="true">
			<fileset dir="${src.dir}">
				<include name="**/*.xml"/>
			</fileset>
		</copy>

		<mkdir dir="${dist.dir}"/>

		<jar jarfile="${dist.dir}/${jarfile}" compress="true" basedir="${build.dir}">
			<manifest>
			    <attribute name="Built-By" value="${user.name}"/>
				  <attribute name="Extension-Name" value="org.opensc.pkcs11"/>
				  <attribute name="Specification-Title" value="OpenSC PKCS#11 JCE provider"/>
			      <attribute name="Specification-Version" value="${version}"/>
			      <attribute name="Specification-Vendor" value="opensc-project.org"/>
			      <attribute name="Implementation-Title" value="OpenSC PKCS#11 JCE provider"/>
			      <attribute name="Implementation-Version" value="${version}.${patchlevel}"/> 
				  <attribute name="Implementation-Vendor" value="opensc-project.org"/>
				  <attribute name="Implementation-Vendor-Id" value="org.opensc-project"/>
			  </manifest>
		</jar>
	</target>
	
    <!-- condition opensc-pkcs11.keystore.available -->
      <condition property="opensc-pkcs11.keystore.available">
         <available file="conf/keystore/opensc-pkcs11.txt"/>
      </condition>

	<!-- target signedjarfile -->
	<target name="signedjarfile" depends="jarfile" if="opensc-pkcs11.keystore.available"
		description="Sign the generated jar file.">
		
		<!-- Import the keystore_passwd, filename and signing_alias
		     properties from opensc-pkcs11.txt -->
		<property file="conf/keystore/opensc-pkcs11.txt"/>

		<exec executable="jarsigner" failonerror="true">
			<arg line="-keystore conf/keystore/${filename}"/>
			<arg line="-storepass ${keystore_passwd}"/>
			<arg line="${dist.dir}/${jarfile}"/>
			<arg line="${signing_alias}"/>
		</exec>
		
	</target>
		
		<!-- target all -->
    <target name="all" depends="clean,fetchjars,distzip" description="Clean,distzip"/>

        <!-- target buildtest -->
	<target name="buildtest" depends="signedjarfile" description="Compile test source tree java files into class files">

		<mkdir dir="${test.build.dir}"/>

		<javac destdir="${test.build.dir}" debug="true"
				deprecation="false" optimize="false" failonerror="true" encoding="UTF-8" >
			<src path="${test.src.dir}"/>
			<classpath refid="test-classpath"/>
		</javac>

	</target>

       <!-- target runtestclass -->
	<target name="runtestclass" depends="buildtest,jnibuild" description="run a single test">
	
		<java classname="junit.textui.TestRunner" fork="true">
  	    	    <arg value="-classNames"/>
	    	    <arg value="${testClass}"/>
                    <jvmarg value="-Djava.library.path=${c.build.dir}/jniP11"/>
		    <classpath refid="runtest-classpath"/>
		</java>

        </target>

       <!-- target runtest -->
	<target name="runtest" depends="buildtest,jnibuild" description="Compile test source tree java files into class files">
	  <antcall target="runtestclass">
           <param name="testClass" value="org.opensc.test.pkcs11.TestProvider"/>
          </antcall>

        </target>


	<!-- target javadoc -->
	<target name="javadoc" depends="build" >
		<delete dir="${javadoc.dir}"/>
		<mkdir dir="${javadoc.dir}"/>
		<javadoc destdir="${javadoc.dir}">
		  <fileset dir="${src.dir}" defaultexcludes="yes" />
			<!-- when your offline activate this -->
			<!--
			<link offline="true" href="http://java.sun.com/j2se/1.5.0/docs/api/" packagelistloc="doc/javadoc-packagelists/jdk" />
			-->
			<!-- when you can access the web, use this -->
			<link offline="false" href="http://java.sun.com/j2se/1.5.0/docs/api/" />
			<classpath refid="test-classpath"/>
		</javadoc>
	</target>
	
</project>
